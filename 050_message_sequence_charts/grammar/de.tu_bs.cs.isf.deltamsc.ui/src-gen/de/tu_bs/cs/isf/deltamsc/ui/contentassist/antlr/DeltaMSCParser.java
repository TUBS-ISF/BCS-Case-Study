/*
* generated by Xtext
*/
package de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.tu_bs.cs.isf.deltamsc.services.DeltaMSCGrammarAccess;

public class DeltaMSCParser extends AbstractContentAssistParser {
	
	@Inject
	private DeltaMSCGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr.internal.InternalDeltaMSCParser createParser() {
		de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr.internal.InternalDeltaMSCParser result = new de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr.internal.InternalDeltaMSCParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInputAccess().getAlternatives_0(), "rule__Input__Alternatives_0");
					put(grammarAccess.getInputAccess().getAlternatives_1(), "rule__Input__Alternatives_1");
					put(grammarAccess.getInputAccess().getAlternatives_2(), "rule__Input__Alternatives_2");
					put(grammarAccess.getInputAccess().getAlternatives_3(), "rule__Input__Alternatives_3");
					put(grammarAccess.getInputAccess().getAlternatives_4(), "rule__Input__Alternatives_4");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getTestcaseAccess().getGroup(), "rule__Testcase__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getDeltaMSCAccess().getTestcasesAssignment(), "rule__DeltaMSC__TestcasesAssignment");
					put(grammarAccess.getInputAccess().getFirstAssignment_0_0(), "rule__Input__FirstAssignment_0_0");
					put(grammarAccess.getInputAccess().getSignalAssignment_2_0(), "rule__Input__SignalAssignment_2_0");
					put(grammarAccess.getInputAccess().getSecondAssignment_4_0(), "rule__Input__SecondAssignment_4_0");
					put(grammarAccess.getTestcaseAccess().getFilenameAssignment_1(), "rule__Testcase__FilenameAssignment_1");
					put(grammarAccess.getTestcaseAccess().getInputsAssignment_3(), "rule__Testcase__InputsAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr.internal.InternalDeltaMSCParser typedParser = (de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr.internal.InternalDeltaMSCParser) parser;
			typedParser.entryRuleDeltaMSC();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DeltaMSCGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DeltaMSCGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
