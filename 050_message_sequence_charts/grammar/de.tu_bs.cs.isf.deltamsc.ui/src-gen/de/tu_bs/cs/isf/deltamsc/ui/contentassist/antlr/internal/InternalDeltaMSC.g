/*
* generated by Xtext
*/
grammar InternalDeltaMSC;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.tu_bs.cs.isf.deltamsc.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.tu_bs.cs.isf.deltamsc.services.DeltaMSCGrammarAccess;

}

@parser::members {
 
 	private DeltaMSCGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DeltaMSCGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDeltaMSC
entryRuleDeltaMSC 
:
{ before(grammarAccess.getDeltaMSCRule()); }
	 ruleDeltaMSC
{ after(grammarAccess.getDeltaMSCRule()); } 
	 EOF 
;

// Rule DeltaMSC
ruleDeltaMSC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeltaMSCAccess().getTestcasesAssignment()); }
(rule__DeltaMSC__TestcasesAssignment)*
{ after(grammarAccess.getDeltaMSCAccess().getTestcasesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestcase
entryRuleTestcase 
:
{ before(grammarAccess.getTestcaseRule()); }
	 ruleTestcase
{ after(grammarAccess.getTestcaseRule()); } 
	 EOF 
;

// Rule Testcase
ruleTestcase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestcaseAccess().getGroup()); }
(rule__Testcase__Group__0)
{ after(grammarAccess.getTestcaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Input__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getFirstAssignment_0_0()); }
(rule__Input__FirstAssignment_0_0)
{ after(grammarAccess.getInputAccess().getFirstAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getENVKeyword_0_1()); }

	'ENV' 

{ after(grammarAccess.getInputAccess().getENVKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getHyphenMinusGreaterThanSignKeyword_1_0()); }

	'->' 

{ after(grammarAccess.getInputAccess().getHyphenMinusGreaterThanSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getCommaKeyword_1_1()); }

	',' 

{ after(grammarAccess.getInputAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSignalAssignment_2_0()); }
(rule__Input__SignalAssignment_2_0)
{ after(grammarAccess.getInputAccess().getSignalAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getTickKeyword_2_1()); }

	'tick' 

{ after(grammarAccess.getInputAccess().getTickKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getHyphenMinusGreaterThanSignKeyword_3_0()); }

	'->' 

{ after(grammarAccess.getInputAccess().getHyphenMinusGreaterThanSignKeyword_3_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getCommaKeyword_3_1()); }

	',' 

{ after(grammarAccess.getInputAccess().getCommaKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSecondAssignment_4_0()); }
(rule__Input__SecondAssignment_4_0)
{ after(grammarAccess.getInputAccess().getSecondAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getENVKeyword_4_1()); }

	'ENV' 

{ after(grammarAccess.getInputAccess().getENVKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getAlternatives_0()); }
(rule__Input__Alternatives_0)
{ after(grammarAccess.getInputAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getAlternatives_1()); }
(rule__Input__Alternatives_1)
{ after(grammarAccess.getInputAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getAlternatives_2()); }
(rule__Input__Alternatives_2)
{ after(grammarAccess.getInputAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__3__Impl
	rule__Input__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getAlternatives_3()); }
(rule__Input__Alternatives_3)
{ after(grammarAccess.getInputAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getAlternatives_4()); }
(rule__Input__Alternatives_4)
{ after(grammarAccess.getInputAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Testcase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__0__Impl
	rule__Testcase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getTestcaseKeyword_0()); }

	'Testcase' 

{ after(grammarAccess.getTestcaseAccess().getTestcaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Testcase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__1__Impl
	rule__Testcase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getFilenameAssignment_1()); }
(rule__Testcase__FilenameAssignment_1)
{ after(grammarAccess.getTestcaseAccess().getFilenameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Testcase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__2__Impl
	rule__Testcase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getTestcaseAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Testcase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__3__Impl
	rule__Testcase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getInputsAssignment_3()); }
(rule__Testcase__InputsAssignment_3)*
{ after(grammarAccess.getTestcaseAccess().getInputsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Testcase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getTestcaseAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DeltaMSC__TestcasesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeltaMSCAccess().getTestcasesTestcaseParserRuleCall_0()); }
	ruleTestcase{ after(grammarAccess.getDeltaMSCAccess().getTestcasesTestcaseParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__FirstAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getFirstComponentCrossReference_0_0_0()); }
(
{ before(grammarAccess.getInputAccess().getFirstComponentQualifiedNameParserRuleCall_0_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getInputAccess().getFirstComponentQualifiedNameParserRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getInputAccess().getFirstComponentCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__SignalAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSignalSignalCrossReference_2_0_0()); }
(
{ before(grammarAccess.getInputAccess().getSignalSignalQualifiedNameParserRuleCall_2_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getInputAccess().getSignalSignalQualifiedNameParserRuleCall_2_0_0_1()); }
)
{ after(grammarAccess.getInputAccess().getSignalSignalCrossReference_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__SecondAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getSecondComponentCrossReference_4_0_0()); }
(
{ before(grammarAccess.getInputAccess().getSecondComponentQualifiedNameParserRuleCall_4_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getInputAccess().getSecondComponentQualifiedNameParserRuleCall_4_0_0_1()); }
)
{ after(grammarAccess.getInputAccess().getSecondComponentCrossReference_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__FilenameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getFilenameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTestcaseAccess().getFilenameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__InputsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getInputsInputParserRuleCall_3_0()); }
	ruleInput{ after(grammarAccess.getTestcaseAccess().getInputsInputParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


