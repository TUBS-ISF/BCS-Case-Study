/*
* generated by Xtext
*/
package de.tu_bs.cs.isf.deltamsc.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DeltaMSCGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DeltaMSCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaMSC");
		private final Assignment cTestcasesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTestcasesTestcaseParserRuleCall_0 = (RuleCall)cTestcasesAssignment.eContents().get(0);
		
		//DeltaMSC:
		//	testcases+=Testcase*;
		public ParserRule getRule() { return rule; }

		//testcases+=Testcase*
		public Assignment getTestcasesAssignment() { return cTestcasesAssignment; }

		//Testcase
		public RuleCall getTestcasesTestcaseParserRuleCall_0() { return cTestcasesTestcaseParserRuleCall_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cFirstComponentCrossReference_0_0_0 = (CrossReference)cFirstAssignment_0_0.eContents().get(0);
		private final RuleCall cFirstComponentQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cFirstComponentCrossReference_0_0_0.eContents().get(1);
		private final Keyword cENVKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSignalSignalCrossReference_2_0_0 = (CrossReference)cSignalAssignment_2_0.eContents().get(0);
		private final RuleCall cSignalSignalQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cSignalSignalCrossReference_2_0_0.eContents().get(1);
		private final Keyword cTickKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cSecondAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cSecondComponentCrossReference_4_0_0 = (CrossReference)cSecondAssignment_4_0.eContents().get(0);
		private final RuleCall cSecondComponentQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cSecondComponentCrossReference_4_0_0.eContents().get(1);
		private final Keyword cENVKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//Input:
		//	(first=[arx::Component|QualifiedName] | "ENV") ("->" | ",") (signal=[arx::Signal|QualifiedName] | "tick") ("->" |
		//	",") (second=[arx::Component|QualifiedName] | "ENV");
		public ParserRule getRule() { return rule; }

		//(first=[arx::Component|QualifiedName] | "ENV") ("->" | ",") (signal=[arx::Signal|QualifiedName] | "tick") ("->" | ",")
		//(second=[arx::Component|QualifiedName] | "ENV")
		public Group getGroup() { return cGroup; }

		//first=[arx::Component|QualifiedName] | "ENV"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//first=[arx::Component|QualifiedName]
		public Assignment getFirstAssignment_0_0() { return cFirstAssignment_0_0; }

		//[arx::Component|QualifiedName]
		public CrossReference getFirstComponentCrossReference_0_0_0() { return cFirstComponentCrossReference_0_0_0; }

		//QualifiedName
		public RuleCall getFirstComponentQualifiedNameParserRuleCall_0_0_0_1() { return cFirstComponentQualifiedNameParserRuleCall_0_0_0_1; }

		//"ENV"
		public Keyword getENVKeyword_0_1() { return cENVKeyword_0_1; }

		//"->" | ","
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//signal=[arx::Signal|QualifiedName] | "tick"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//signal=[arx::Signal|QualifiedName]
		public Assignment getSignalAssignment_2_0() { return cSignalAssignment_2_0; }

		//[arx::Signal|QualifiedName]
		public CrossReference getSignalSignalCrossReference_2_0_0() { return cSignalSignalCrossReference_2_0_0; }

		//QualifiedName
		public RuleCall getSignalSignalQualifiedNameParserRuleCall_2_0_0_1() { return cSignalSignalQualifiedNameParserRuleCall_2_0_0_1; }

		//"tick"
		public Keyword getTickKeyword_2_1() { return cTickKeyword_2_1; }

		//"->" | ","
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }

		//second=[arx::Component|QualifiedName] | "ENV"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//second=[arx::Component|QualifiedName]
		public Assignment getSecondAssignment_4_0() { return cSecondAssignment_4_0; }

		//[arx::Component|QualifiedName]
		public CrossReference getSecondComponentCrossReference_4_0_0() { return cSecondComponentCrossReference_4_0_0; }

		//QualifiedName
		public RuleCall getSecondComponentQualifiedNameParserRuleCall_4_0_0_1() { return cSecondComponentQualifiedNameParserRuleCall_4_0_0_1; }

		//"ENV"
		public Keyword getENVKeyword_4_1() { return cENVKeyword_4_1; }
	}

	public class TestcaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Testcase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestcaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameIDTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsInputParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Testcase:
		//	"Testcase" filename=ID "{" inputs+=Input* "}";
		public ParserRule getRule() { return rule; }

		//"Testcase" filename=ID "{" inputs+=Input* "}"
		public Group getGroup() { return cGroup; }

		//"Testcase"
		public Keyword getTestcaseKeyword_0() { return cTestcaseKeyword_0; }

		//filename=ID
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }

		//ID
		public RuleCall getFilenameIDTerminalRuleCall_1_0() { return cFilenameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//inputs+=Input*
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }

		//Input
		public RuleCall getInputsInputParserRuleCall_3_0() { return cInputsInputParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private DeltaMSCElements pDeltaMSC;
	private InputElements pInput;
	private TestcaseElements pTestcase;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DeltaMSCGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tu_bs.cs.isf.deltamsc.DeltaMSC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DeltaMSC:
	//	testcases+=Testcase*;
	public DeltaMSCElements getDeltaMSCAccess() {
		return (pDeltaMSC != null) ? pDeltaMSC : (pDeltaMSC = new DeltaMSCElements());
	}
	
	public ParserRule getDeltaMSCRule() {
		return getDeltaMSCAccess().getRule();
	}

	//Input:
	//	(first=[arx::Component|QualifiedName] | "ENV") ("->" | ",") (signal=[arx::Signal|QualifiedName] | "tick") ("->" |
	//	",") (second=[arx::Component|QualifiedName] | "ENV");
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Testcase:
	//	"Testcase" filename=ID "{" inputs+=Input* "}";
	public TestcaseElements getTestcaseAccess() {
		return (pTestcase != null) ? pTestcase : (pTestcase = new TestcaseElements());
	}
	
	public ParserRule getTestcaseRule() {
		return getTestcaseAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
