/*
* generated by Xtext
*/
grammar InternalDeltaMSC;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.tu_bs.cs.isf.deltamsc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.tu_bs.cs.isf.deltamsc.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.tu_bs.cs.isf.deltamsc.services.DeltaMSCGrammarAccess;

}

@parser::members {

 	private DeltaMSCGrammarAccess grammarAccess;
 	
    public InternalDeltaMSCParser(TokenStream input, DeltaMSCGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DeltaMSC";	
   	}
   	
   	@Override
   	protected DeltaMSCGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDeltaMSC
entryRuleDeltaMSC returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeltaMSCRule()); }
	 iv_ruleDeltaMSC=ruleDeltaMSC 
	 { $current=$iv_ruleDeltaMSC.current; } 
	 EOF 
;

// Rule DeltaMSC
ruleDeltaMSC returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeltaMSCAccess().getTestcasesTestcaseParserRuleCall_0()); 
	    }
		lv_testcases_0_0=ruleTestcase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeltaMSCRule());
	        }
       		add(
       			$current, 
       			"testcases",
        		lv_testcases_0_0, 
        		"Testcase");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getFirstComponentCrossReference_0_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_1='ENV' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputAccess().getENVKeyword_0_1());
    }
)(	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInputAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
    }

    |	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInputAccess().getCommaKeyword_1_1());
    }
)((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getSignalSignalCrossReference_2_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_5='tick' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInputAccess().getTickKeyword_2_1());
    }
)(	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInputAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }

    |	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInputAccess().getCommaKeyword_3_1());
    }
)((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getSecondComponentCrossReference_4_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_9='ENV' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInputAccess().getENVKeyword_4_1());
    }
))
;





// Entry rule entryRuleTestcase
entryRuleTestcase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestcaseRule()); }
	 iv_ruleTestcase=ruleTestcase 
	 { $current=$iv_ruleTestcase.current; } 
	 EOF 
;

// Rule Testcase
ruleTestcase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Testcase' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestcaseAccess().getTestcaseKeyword_0());
    }
(
(
		lv_filename_1_0=RULE_ID
		{
			newLeafNode(lv_filename_1_0, grammarAccess.getTestcaseAccess().getFilenameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestcaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"filename",
        		lv_filename_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestcaseAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestcaseAccess().getInputsInputParserRuleCall_3_0()); 
	    }
		lv_inputs_3_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestcaseRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_3_0, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTestcaseAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


