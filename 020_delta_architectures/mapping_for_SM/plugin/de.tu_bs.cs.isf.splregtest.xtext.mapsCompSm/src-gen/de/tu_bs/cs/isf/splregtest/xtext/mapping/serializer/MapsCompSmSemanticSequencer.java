/*
 * generated by Xtext
 */
package de.tu_bs.cs.isf.splregtest.xtext.mapping.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.tu_bs.cs.isf.splregtest.xtext.mapping.mapsCompSm.BSM;
import de.tu_bs.cs.isf.splregtest.xtext.mapping.mapsCompSm.Component;
import de.tu_bs.cs.isf.splregtest.xtext.mapping.mapsCompSm.Mapping;
import de.tu_bs.cs.isf.splregtest.xtext.mapping.mapsCompSm.MapsCompSmPackage;
import de.tu_bs.cs.isf.splregtest.xtext.mapping.services.MapsCompSmGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MapsCompSmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MapsCompSmGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MapsCompSmPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MapsCompSmPackage.BSM:
				sequence_BSM(context, (BSM) semanticObject); 
				return; 
			case MapsCompSmPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case MapsCompSmPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BSM(EObject context, BSM semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MapsCompSmPackage.Literals.BSM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MapsCompSmPackage.Literals.BSM__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBSMAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID bsms+=BSM*)
	 */
	protected void sequence_Component(EObject context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID components+=Component*)
	 */
	protected void sequence_Mapping(EObject context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
