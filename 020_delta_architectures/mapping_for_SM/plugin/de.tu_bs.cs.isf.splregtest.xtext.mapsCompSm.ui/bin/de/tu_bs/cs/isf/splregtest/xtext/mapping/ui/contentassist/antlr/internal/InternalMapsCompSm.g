/*
 * generated by Xtext
 */
grammar InternalMapsCompSm;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.tu_bs.cs.isf.splregtest.xtext.mapping.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.tu_bs.cs.isf.splregtest.xtext.mapping.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.tu_bs.cs.isf.splregtest.xtext.mapping.services.MapsCompSmGrammarAccess;

}

@parser::members {
 
 	private MapsCompSmGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MapsCompSmGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponent
entryRuleComponent 
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentAccess().getGroup()); }
(rule__Component__Group__0)
{ after(grammarAccess.getComponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSM
entryRuleBSM 
:
{ before(grammarAccess.getBSMRule()); }
	 ruleBSM
{ after(grammarAccess.getBSMRule()); } 
	 EOF 
;

// Rule BSM
ruleBSM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBSMAccess().getGroup()); }
(rule__BSM__Group__0)
{ after(grammarAccess.getBSMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getMappingKeyword_0()); }

	'Mapping' 

{ after(grammarAccess.getMappingAccess().getMappingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getNameAssignment_1()); }
(rule__Mapping__NameAssignment_1)
{ after(grammarAccess.getMappingAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
	rule__Mapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__3__Impl
	rule__Mapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getComponentsAssignment_3()); }
(rule__Mapping__ComponentsAssignment_3)*
{ after(grammarAccess.getMappingAccess().getComponentsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Component__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__0__Impl
	rule__Component__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getComponentKeyword_0()); }

	'component' 

{ after(grammarAccess.getComponentAccess().getComponentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__1__Impl
	rule__Component__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getNameAssignment_1()); }
(rule__Component__NameAssignment_1)
{ after(grammarAccess.getComponentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__2__Impl
	rule__Component__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__3__Impl
	rule__Component__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getBsmsAssignment_3()); }
(rule__Component__BsmsAssignment_3)*
{ after(grammarAccess.getComponentAccess().getBsmsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BSM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSM__Group__0__Impl
	rule__BSM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMAccess().getBsmKeyword_0()); }

	'bsm' 

{ after(grammarAccess.getBSMAccess().getBsmKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSM__Group__1__Impl
	rule__BSM__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMAccess().getNameAssignment_1()); }
(rule__BSM__NameAssignment_1)
{ after(grammarAccess.getBSMAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSM__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSM__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSM__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMAccess().getCommaKeyword_2()); }
(
	',' 
)?
{ after(grammarAccess.getBSMAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Mapping__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMappingAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__ComponentsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getComponentsComponentParserRuleCall_3_0()); }
	ruleComponent{ after(grammarAccess.getMappingAccess().getComponentsComponentParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__BsmsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getBsmsBSMParserRuleCall_3_0()); }
	ruleBSM{ after(grammarAccess.getComponentAccess().getBsmsBSMParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSM__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBSMAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


