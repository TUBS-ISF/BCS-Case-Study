/*
* generated by Xtext
*/
package org.xtext.deltarx.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DeltarxGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DeltarxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deltarx");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cArchitectureKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cForFeaturemodelKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFmdirAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFmdirSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cFmdirAssignment_0_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cSignalsKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_5_1 = (Keyword)cGroup_0_5.eContents().get(1);
		private final Assignment cSignalsAssignment_0_5_2 = (Assignment)cGroup_0_5.eContents().get(2);
		private final RuleCall cSignalsSignalParserRuleCall_0_5_2_0 = (RuleCall)cSignalsAssignment_0_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5_3 = (Keyword)cGroup_0_5.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cComponentsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cComponentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cComponentsComponentParserRuleCall_1_2_0 = (RuleCall)cComponentsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cConnectorsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConnectorsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConnectorsConnectorParserRuleCall_2_2_0 = (RuleCall)cConnectorsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cDeltasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDeltasAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDeltasDeltaParserRuleCall_3_2_0 = (RuleCall)cDeltasAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cUnorderedGroup.eContents().get(4);
		
		//Deltarx:
		//	"architecture" name=ID "for featuremodel" fmdir=STRING "{" ("signals" "{" signals+=Signal* "}")? & ("components" "{"
		//	components+=Component* "}")? & ("connectors" "{" connectors+=Connector* "}")? & ("deltas" "{" deltas+=Delta* "}")? &
		//	"}";
		public ParserRule getRule() { return rule; }

		//"architecture" name=ID "for featuremodel" fmdir=STRING "{" ("signals" "{" signals+=Signal* "}")? & ("components" "{"
		//components+=Component* "}")? & ("connectors" "{" connectors+=Connector* "}")? & ("deltas" "{" deltas+=Delta* "}")? &
		//"}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"architecture" name=ID "for featuremodel" fmdir=STRING "{" ("signals" "{" signals+=Signal* "}")?
		public Group getGroup_0() { return cGroup_0; }

		//"architecture"
		public Keyword getArchitectureKeyword_0_0() { return cArchitectureKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"for featuremodel"
		public Keyword getForFeaturemodelKeyword_0_2() { return cForFeaturemodelKeyword_0_2; }

		//fmdir=STRING
		public Assignment getFmdirAssignment_0_3() { return cFmdirAssignment_0_3; }

		//STRING
		public RuleCall getFmdirSTRINGTerminalRuleCall_0_3_0() { return cFmdirSTRINGTerminalRuleCall_0_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_4() { return cLeftCurlyBracketKeyword_0_4; }

		//("signals" "{" signals+=Signal* "}")?
		public Group getGroup_0_5() { return cGroup_0_5; }

		//"signals"
		public Keyword getSignalsKeyword_0_5_0() { return cSignalsKeyword_0_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_5_1() { return cLeftCurlyBracketKeyword_0_5_1; }

		//signals+=Signal*
		public Assignment getSignalsAssignment_0_5_2() { return cSignalsAssignment_0_5_2; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_5_2_0() { return cSignalsSignalParserRuleCall_0_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_5_3() { return cRightCurlyBracketKeyword_0_5_3; }

		//("components" "{" components+=Component* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"components"
		public Keyword getComponentsKeyword_1_0() { return cComponentsKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//components+=Component*
		public Assignment getComponentsAssignment_1_2() { return cComponentsAssignment_1_2; }

		//Component
		public RuleCall getComponentsComponentParserRuleCall_1_2_0() { return cComponentsComponentParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//("connectors" "{" connectors+=Connector* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"connectors"
		public Keyword getConnectorsKeyword_2_0() { return cConnectorsKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//connectors+=Connector*
		public Assignment getConnectorsAssignment_2_2() { return cConnectorsAssignment_2_2; }

		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_2_2_0() { return cConnectorsConnectorParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//("deltas" "{" deltas+=Delta* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"deltas"
		public Keyword getDeltasKeyword_3_0() { return cDeltasKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//deltas+=Delta*
		public Assignment getDeltasAssignment_3_2() { return cDeltasAssignment_3_2; }

		//Delta
		public RuleCall getDeltasDeltaParserRuleCall_3_2_0() { return cDeltasDeltaParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSignalTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Signal:
		//	name=ID type=SignalType;
		public ParserRule getRule() { return rule; }

		//name=ID type=SignalType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=SignalType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//SignalType
		public RuleCall getTypeSignalTypeParserRuleCall_1_0() { return cTypeSignalTypeParserRuleCall_1_0; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPortsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPortsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPortsPortParserRuleCall_2_2_0 = (RuleCall)cPortsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConnectorsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConnectorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConnectorsConnectorParserRuleCall_3_2_0 = (RuleCall)cConnectorsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSubcomponentsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cSubcomponentsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSubcomponentsComponentParserRuleCall_4_2_0 = (RuleCall)cSubcomponentsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Component:
		//	name=ID "{" ("ports" "{" ports+=Port* "}")? ("connectors" "{" connectors+=Connector* "}")? ("subcomponents" "{"
		//	subcomponents+=Component* "}")? "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" ("ports" "{" ports+=Port* "}")? ("connectors" "{" connectors+=Connector* "}")? ("subcomponents" "{"
		//subcomponents+=Component* "}")? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("ports" "{" ports+=Port* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"ports"
		public Keyword getPortsKeyword_2_0() { return cPortsKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//ports+=Port*
		public Assignment getPortsAssignment_2_2() { return cPortsAssignment_2_2; }

		//Port
		public RuleCall getPortsPortParserRuleCall_2_2_0() { return cPortsPortParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//("connectors" "{" connectors+=Connector* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"connectors"
		public Keyword getConnectorsKeyword_3_0() { return cConnectorsKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//connectors+=Connector*
		public Assignment getConnectorsAssignment_3_2() { return cConnectorsAssignment_3_2; }

		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_3_2_0() { return cConnectorsConnectorParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//("subcomponents" "{" subcomponents+=Component* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"subcomponents"
		public Keyword getSubcomponentsKeyword_4_0() { return cSubcomponentsKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//subcomponents+=Component*
		public Assignment getSubcomponentsAssignment_4_2() { return cSubcomponentsAssignment_4_2; }

		//Component
		public RuleCall getSubcomponentsComponentParserRuleCall_4_2_0() { return cSubcomponentsComponentParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionPortDirectionParserRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		
		////Ports haben keinen Typ, da Signale einen Typ besitzen
		//Port:
		//	direction=PortDirection name=ID signal=[Signal]?;
		public ParserRule getRule() { return rule; }

		//direction=PortDirection name=ID signal=[Signal]?
		public Group getGroup() { return cGroup; }

		//direction=PortDirection
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }

		//PortDirection
		public RuleCall getDirectionPortDirectionParserRuleCall_0_0() { return cDirectionPortDirectionParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//signal=[Signal]?
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }
	}

	public class SignalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//SignalType:
		//	"boolean" | "char" | "int" | "double";
		public ParserRule getRule() { return rule; }

		//"boolean" | "char" | "int" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"char"
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"double"
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }
	}

	public class PortDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PortDirection:
		//	"in" | "out";
		public ParserRule getRule() { return rule; }

		//"in" | "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
	}

	public class EnvironmentMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentMessage");
		private final Keyword cEnvmsgKeyword = (Keyword)rule.eContents().get(1);
		
		//EnvironmentMessage:
		//	"envmsg";
		public ParserRule getRule() { return rule; }

		//"envmsg"
		public Keyword getEnvmsgKeyword() { return cEnvmsgKeyword; }
	}

	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeConnectorTypeOneParserRuleCall_1_0_0 = (RuleCall)cTypeAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypeConnectorTypeTwoParserRuleCall_1_0_1 = (RuleCall)cTypeAlternatives_1_0.eContents().get(1);
		
		//Connector:
		//	name=ID type=(ConnectorTypeOne | ConnectorTypeTwo);
		public ParserRule getRule() { return rule; }

		//name=ID type=(ConnectorTypeOne | ConnectorTypeTwo)
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=(ConnectorTypeOne | ConnectorTypeTwo)
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ConnectorTypeOne | ConnectorTypeTwo
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }

		//ConnectorTypeOne
		public RuleCall getTypeConnectorTypeOneParserRuleCall_1_0_0() { return cTypeConnectorTypeOneParserRuleCall_1_0_0; }

		//ConnectorTypeTwo
		public RuleCall getTypeConnectorTypeTwoParserRuleCall_1_0_1() { return cTypeConnectorTypeTwoParserRuleCall_1_0_1; }
	}

	public class ConnectorTypeOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectorTypeOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceIDTerminalRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortnameoneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cPortnameoneAlternatives_3_0 = (Alternatives)cPortnameoneAssignment_3.eContents().get(0);
		private final RuleCall cPortnameoneIDTerminalRuleCall_3_0_0 = (RuleCall)cPortnameoneAlternatives_3_0.eContents().get(0);
		private final RuleCall cPortnameoneEnvironmentMessageParserRuleCall_3_0_1 = (RuleCall)cPortnameoneAlternatives_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSignaltypeoneAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSignaltypeoneIDTerminalRuleCall_5_0 = (RuleCall)cSignaltypeoneAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSignaltypetwoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSignaltypetwoIDTerminalRuleCall_7_0 = (RuleCall)cSignaltypetwoAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPortnametwoAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Alternatives cPortnametwoAlternatives_9_0 = (Alternatives)cPortnametwoAssignment_9.eContents().get(0);
		private final RuleCall cPortnametwoIDTerminalRuleCall_9_0_0 = (RuleCall)cPortnametwoAlternatives_9_0.eContents().get(0);
		private final RuleCall cPortnametwoEnvironmentMessageParserRuleCall_9_0_1 = (RuleCall)cPortnametwoAlternatives_9_0.eContents().get(1);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cDestinationAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cDestinationIDTerminalRuleCall_11_0 = (RuleCall)cDestinationAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//ConnectorTypeOne:
		//	"(" source=ID "," portnameone=(ID | EnvironmentMessage) "," signaltypeone=ID "," signaltypetwo=ID "," portnametwo=(ID
		//	| EnvironmentMessage) "," destination=ID ")";
		public ParserRule getRule() { return rule; }

		//"(" source=ID "," portnameone=(ID | EnvironmentMessage) "," signaltypeone=ID "," signaltypetwo=ID "," portnametwo=(ID |
		//EnvironmentMessage) "," destination=ID ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//source=ID
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//ID
		public RuleCall getSourceIDTerminalRuleCall_1_0() { return cSourceIDTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//portnameone=(ID | EnvironmentMessage)
		public Assignment getPortnameoneAssignment_3() { return cPortnameoneAssignment_3; }

		//ID | EnvironmentMessage
		public Alternatives getPortnameoneAlternatives_3_0() { return cPortnameoneAlternatives_3_0; }

		//ID
		public RuleCall getPortnameoneIDTerminalRuleCall_3_0_0() { return cPortnameoneIDTerminalRuleCall_3_0_0; }

		//EnvironmentMessage
		public RuleCall getPortnameoneEnvironmentMessageParserRuleCall_3_0_1() { return cPortnameoneEnvironmentMessageParserRuleCall_3_0_1; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//signaltypeone=ID
		public Assignment getSignaltypeoneAssignment_5() { return cSignaltypeoneAssignment_5; }

		//ID
		public RuleCall getSignaltypeoneIDTerminalRuleCall_5_0() { return cSignaltypeoneIDTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//signaltypetwo=ID
		public Assignment getSignaltypetwoAssignment_7() { return cSignaltypetwoAssignment_7; }

		//ID
		public RuleCall getSignaltypetwoIDTerminalRuleCall_7_0() { return cSignaltypetwoIDTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//portnametwo=(ID | EnvironmentMessage)
		public Assignment getPortnametwoAssignment_9() { return cPortnametwoAssignment_9; }

		//ID | EnvironmentMessage
		public Alternatives getPortnametwoAlternatives_9_0() { return cPortnametwoAlternatives_9_0; }

		//ID
		public RuleCall getPortnametwoIDTerminalRuleCall_9_0_0() { return cPortnametwoIDTerminalRuleCall_9_0_0; }

		//EnvironmentMessage
		public RuleCall getPortnametwoEnvironmentMessageParserRuleCall_9_0_1() { return cPortnametwoEnvironmentMessageParserRuleCall_9_0_1; }

		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }

		//destination=ID
		public Assignment getDestinationAssignment_11() { return cDestinationAssignment_11; }

		//ID
		public RuleCall getDestinationIDTerminalRuleCall_11_0() { return cDestinationIDTerminalRuleCall_11_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}

	public class ConnectorTypeTwoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectorTypeTwo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceIDTerminalRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourcesignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourcesignalIDTerminalRuleCall_3_0 = (RuleCall)cSourcesignalAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDestinationsignalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDestinationsignalIDTerminalRuleCall_5_0 = (RuleCall)cDestinationsignalAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDestinationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDestinationIDTerminalRuleCall_7_0 = (RuleCall)cDestinationAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ConnectorTypeTwo:
		//	"(" source=ID "," sourcesignal=ID "," destinationsignal=ID "," destination=ID ")";
		public ParserRule getRule() { return rule; }

		//"(" source=ID "," sourcesignal=ID "," destinationsignal=ID "," destination=ID ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//source=ID
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//ID
		public RuleCall getSourceIDTerminalRuleCall_1_0() { return cSourceIDTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//sourcesignal=ID
		public Assignment getSourcesignalAssignment_3() { return cSourcesignalAssignment_3; }

		//ID
		public RuleCall getSourcesignalIDTerminalRuleCall_3_0() { return cSourcesignalIDTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//destinationsignal=ID
		public Assignment getDestinationsignalAssignment_5() { return cDestinationsignalAssignment_5; }

		//ID
		public RuleCall getDestinationsignalIDTerminalRuleCall_5_0() { return cDestinationsignalIDTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//destination=ID
		public Assignment getDestinationAssignment_7() { return cDestinationAssignment_7; }

		//ID
		public RuleCall getDestinationIDTerminalRuleCall_7_0() { return cDestinationIDTerminalRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class DeltaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAfterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAfterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAfterIDTerminalRuleCall_1_1_0 = (RuleCall)cAfterAssignment_1_1.eContents().get(0);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAppconAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAppconSTRINGTerminalRuleCall_3_0 = (RuleCall)cAppconAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRemoveconnectorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cRemoveConnectorAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cRemoveConnectorDeltaRemoveConnectorParserRuleCall_5_2_0 = (RuleCall)cRemoveConnectorAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRemovecomponentKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRemoveComponentAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRemoveComponentDeltaRemoveComponentParserRuleCall_6_2_0 = (RuleCall)cRemoveComponentAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRemovesignalKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cRemoveSignalAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cRemoveSignalSignalCrossReference_7_2_0 = (CrossReference)cRemoveSignalAssignment_7_2.eContents().get(0);
		private final RuleCall cRemoveSignalSignalIDTerminalRuleCall_7_2_0_1 = (RuleCall)cRemoveSignalSignalCrossReference_7_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cRemoveportKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cRemovePortAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cRemovePortDeltaRemovePortParserRuleCall_8_2_0 = (RuleCall)cRemovePortAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAddsignalKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cNewSignalAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cNewSignalSignalParserRuleCall_9_2_0 = (RuleCall)cNewSignalAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAddcomponentKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cNewComponentAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cNewComponentDeltaAddComponentParserRuleCall_10_2_0 = (RuleCall)cNewComponentAssignment_10_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAddconnectorKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cNewConnectorAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cNewConnectorDeltaAddConnectorParserRuleCall_11_2_0 = (RuleCall)cNewConnectorAssignment_11_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cAddportKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cNewPortAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cNewPortDeltaAddPortParserRuleCall_12_2_0 = (RuleCall)cNewPortAssignment_12_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Delta:
		//	name=ID ("after" after+=ID*)? "when" appcon=STRING "{" ("removeconnector" "{" removeConnector+=DeltaRemoveConnector*
		//	"}")? ("removecomponent" "{" removeComponent+=DeltaRemoveComponent* "}")? ("removesignal" "{" removeSignal+=[Signal]*
		//	"}")? ("removeport" "{" removePort+=DeltaRemovePort* "}")? ("addsignal" "{" newSignal+=Signal* "}")? ("addcomponent"
		//	"{" newComponent+=DeltaAddComponent* "}")? ("addconnector" "{" newConnector+=DeltaAddConnector* "}")? ("addport" "{"
		//	newPort+=DeltaAddPort* "}")? "}";
		public ParserRule getRule() { return rule; }

		//name=ID ("after" after+=ID*)? "when" appcon=STRING "{" ("removeconnector" "{" removeConnector+=DeltaRemoveConnector*
		//"}")? ("removecomponent" "{" removeComponent+=DeltaRemoveComponent* "}")? ("removesignal" "{" removeSignal+=[Signal]*
		//"}")? ("removeport" "{" removePort+=DeltaRemovePort* "}")? ("addsignal" "{" newSignal+=Signal* "}")? ("addcomponent"
		//"{" newComponent+=DeltaAddComponent* "}")? ("addconnector" "{" newConnector+=DeltaAddConnector* "}")? ("addport" "{"
		//newPort+=DeltaAddPort* "}")? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("after" after+=ID*)?
		public Group getGroup_1() { return cGroup_1; }

		//"after"
		public Keyword getAfterKeyword_1_0() { return cAfterKeyword_1_0; }

		//after+=ID*
		public Assignment getAfterAssignment_1_1() { return cAfterAssignment_1_1; }

		//ID
		public RuleCall getAfterIDTerminalRuleCall_1_1_0() { return cAfterIDTerminalRuleCall_1_1_0; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//appcon=STRING
		public Assignment getAppconAssignment_3() { return cAppconAssignment_3; }

		//STRING
		public RuleCall getAppconSTRINGTerminalRuleCall_3_0() { return cAppconSTRINGTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("removeconnector" "{" removeConnector+=DeltaRemoveConnector* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"removeconnector"
		public Keyword getRemoveconnectorKeyword_5_0() { return cRemoveconnectorKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//removeConnector+=DeltaRemoveConnector*
		public Assignment getRemoveConnectorAssignment_5_2() { return cRemoveConnectorAssignment_5_2; }

		//DeltaRemoveConnector
		public RuleCall getRemoveConnectorDeltaRemoveConnectorParserRuleCall_5_2_0() { return cRemoveConnectorDeltaRemoveConnectorParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }

		//("removecomponent" "{" removeComponent+=DeltaRemoveComponent* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"removecomponent"
		public Keyword getRemovecomponentKeyword_6_0() { return cRemovecomponentKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//removeComponent+=DeltaRemoveComponent*
		public Assignment getRemoveComponentAssignment_6_2() { return cRemoveComponentAssignment_6_2; }

		//DeltaRemoveComponent
		public RuleCall getRemoveComponentDeltaRemoveComponentParserRuleCall_6_2_0() { return cRemoveComponentDeltaRemoveComponentParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//("removesignal" "{" removeSignal+=[Signal]* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"removesignal"
		public Keyword getRemovesignalKeyword_7_0() { return cRemovesignalKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//removeSignal+=[Signal]*
		public Assignment getRemoveSignalAssignment_7_2() { return cRemoveSignalAssignment_7_2; }

		//[Signal]
		public CrossReference getRemoveSignalSignalCrossReference_7_2_0() { return cRemoveSignalSignalCrossReference_7_2_0; }

		//ID
		public RuleCall getRemoveSignalSignalIDTerminalRuleCall_7_2_0_1() { return cRemoveSignalSignalIDTerminalRuleCall_7_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//("removeport" "{" removePort+=DeltaRemovePort* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"removeport"
		public Keyword getRemoveportKeyword_8_0() { return cRemoveportKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//removePort+=DeltaRemovePort*
		public Assignment getRemovePortAssignment_8_2() { return cRemovePortAssignment_8_2; }

		//DeltaRemovePort
		public RuleCall getRemovePortDeltaRemovePortParserRuleCall_8_2_0() { return cRemovePortDeltaRemovePortParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//("addsignal" "{" newSignal+=Signal* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"addsignal"
		public Keyword getAddsignalKeyword_9_0() { return cAddsignalKeyword_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//newSignal+=Signal*
		public Assignment getNewSignalAssignment_9_2() { return cNewSignalAssignment_9_2; }

		//Signal
		public RuleCall getNewSignalSignalParserRuleCall_9_2_0() { return cNewSignalSignalParserRuleCall_9_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }

		//("addcomponent" "{" newComponent+=DeltaAddComponent* "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"addcomponent"
		public Keyword getAddcomponentKeyword_10_0() { return cAddcomponentKeyword_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }

		//newComponent+=DeltaAddComponent*
		public Assignment getNewComponentAssignment_10_2() { return cNewComponentAssignment_10_2; }

		//DeltaAddComponent
		public RuleCall getNewComponentDeltaAddComponentParserRuleCall_10_2_0() { return cNewComponentDeltaAddComponentParserRuleCall_10_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_3() { return cRightCurlyBracketKeyword_10_3; }

		//("addconnector" "{" newConnector+=DeltaAddConnector* "}")?
		public Group getGroup_11() { return cGroup_11; }

		//"addconnector"
		public Keyword getAddconnectorKeyword_11_0() { return cAddconnectorKeyword_11_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11_1() { return cLeftCurlyBracketKeyword_11_1; }

		//newConnector+=DeltaAddConnector*
		public Assignment getNewConnectorAssignment_11_2() { return cNewConnectorAssignment_11_2; }

		//DeltaAddConnector
		public RuleCall getNewConnectorDeltaAddConnectorParserRuleCall_11_2_0() { return cNewConnectorDeltaAddConnectorParserRuleCall_11_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11_3() { return cRightCurlyBracketKeyword_11_3; }

		//("addport" "{" newPort+=DeltaAddPort* "}")?
		public Group getGroup_12() { return cGroup_12; }

		//"addport"
		public Keyword getAddportKeyword_12_0() { return cAddportKeyword_12_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12_1() { return cLeftCurlyBracketKeyword_12_1; }

		//newPort+=DeltaAddPort*
		public Assignment getNewPortAssignment_12_2() { return cNewPortAssignment_12_2; }

		//DeltaAddPort
		public RuleCall getNewPortDeltaAddPortParserRuleCall_12_2_0() { return cNewPortDeltaAddPortParserRuleCall_12_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12_3() { return cRightCurlyBracketKeyword_12_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class DeltaAddPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaAddPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_0_0 = (RuleCall)cPortAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortComponentIDTerminalRuleCall_2_0 = (RuleCall)cPortComponentAssignment_2.eContents().get(0);
		
		//DeltaAddPort:
		//	port=Port "in" portComponent=ID;
		public ParserRule getRule() { return rule; }

		//port=Port "in" portComponent=ID
		public Group getGroup() { return cGroup; }

		//port=Port
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }

		//Port
		public RuleCall getPortPortParserRuleCall_0_0() { return cPortPortParserRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//portComponent=ID
		public Assignment getPortComponentAssignment_2() { return cPortComponentAssignment_2; }

		//ID
		public RuleCall getPortComponentIDTerminalRuleCall_2_0() { return cPortComponentIDTerminalRuleCall_2_0; }
	}

	public class DeltaRemovePortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaRemovePort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPortNameIDTerminalRuleCall_0_0 = (RuleCall)cPortNameAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortComponentIDTerminalRuleCall_2_0 = (RuleCall)cPortComponentAssignment_2.eContents().get(0);
		
		//DeltaRemovePort:
		//	portName=ID "in" portComponent=ID;
		public ParserRule getRule() { return rule; }

		//portName=ID "in" portComponent=ID
		public Group getGroup() { return cGroup; }

		//portName=ID
		public Assignment getPortNameAssignment_0() { return cPortNameAssignment_0; }

		//ID
		public RuleCall getPortNameIDTerminalRuleCall_0_0() { return cPortNameIDTerminalRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//portComponent=ID
		public Assignment getPortComponentAssignment_2() { return cPortComponentAssignment_2; }

		//ID
		public RuleCall getPortComponentIDTerminalRuleCall_2_0() { return cPortComponentIDTerminalRuleCall_2_0; }
	}

	public class DeltaAddComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaAddComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentComponentParserRuleCall_0_0 = (RuleCall)cComponentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperComponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuperComponentIDTerminalRuleCall_1_1_0 = (RuleCall)cSuperComponentAssignment_1_1.eContents().get(0);
		
		//DeltaAddComponent:
		//	component=Component ("in" superComponent=ID)?;
		public ParserRule getRule() { return rule; }

		//component=Component ("in" superComponent=ID)?
		public Group getGroup() { return cGroup; }

		//component=Component
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }

		//Component
		public RuleCall getComponentComponentParserRuleCall_0_0() { return cComponentComponentParserRuleCall_0_0; }

		//("in" superComponent=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"in"
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }

		//superComponent=ID
		public Assignment getSuperComponentAssignment_1_1() { return cSuperComponentAssignment_1_1; }

		//ID
		public RuleCall getSuperComponentIDTerminalRuleCall_1_1_0() { return cSuperComponentIDTerminalRuleCall_1_1_0; }
	}

	public class DeltaRemoveComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaRemoveComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentIDTerminalRuleCall_0_0 = (RuleCall)cComponentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperComponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuperComponentIDTerminalRuleCall_1_1_0 = (RuleCall)cSuperComponentAssignment_1_1.eContents().get(0);
		
		//DeltaRemoveComponent:
		//	component=ID ("in" superComponent=ID)?;
		public ParserRule getRule() { return rule; }

		//component=ID ("in" superComponent=ID)?
		public Group getGroup() { return cGroup; }

		//component=ID
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }

		//ID
		public RuleCall getComponentIDTerminalRuleCall_0_0() { return cComponentIDTerminalRuleCall_0_0; }

		//("in" superComponent=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"in"
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }

		//superComponent=ID
		public Assignment getSuperComponentAssignment_1_1() { return cSuperComponentAssignment_1_1; }

		//ID
		public RuleCall getSuperComponentIDTerminalRuleCall_1_1_0() { return cSuperComponentIDTerminalRuleCall_1_1_0; }
	}

	public class DeltaAddConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaAddConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConnectorConnectorParserRuleCall_0_0 = (RuleCall)cConnectorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperComponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuperComponentIDTerminalRuleCall_1_1_0 = (RuleCall)cSuperComponentAssignment_1_1.eContents().get(0);
		
		//DeltaAddConnector:
		//	connector=Connector ("in" superComponent=ID)?;
		public ParserRule getRule() { return rule; }

		//connector=Connector ("in" superComponent=ID)?
		public Group getGroup() { return cGroup; }

		//connector=Connector
		public Assignment getConnectorAssignment_0() { return cConnectorAssignment_0; }

		//Connector
		public RuleCall getConnectorConnectorParserRuleCall_0_0() { return cConnectorConnectorParserRuleCall_0_0; }

		//("in" superComponent=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"in"
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }

		//superComponent=ID
		public Assignment getSuperComponentAssignment_1_1() { return cSuperComponentAssignment_1_1; }

		//ID
		public RuleCall getSuperComponentIDTerminalRuleCall_1_1_0() { return cSuperComponentIDTerminalRuleCall_1_1_0; }
	}

	public class DeltaRemoveConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaRemoveConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConnectorIDTerminalRuleCall_0_0 = (RuleCall)cConnectorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperComponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuperComponentIDTerminalRuleCall_1_1_0 = (RuleCall)cSuperComponentAssignment_1_1.eContents().get(0);
		
		////Does not work properly yet...
		////AppCon:
		////	{AppCon} features+=Feature*;
		////
		////Feature returns STRING:
		////	value=PrimaryElement ({STRING.left=current} 'AND' right=PrimaryElement)*;
		////
		////PrimaryElement returns STRING:
		////	'(' Feature ')' | {STRING} ID | NotCon;
		////
		////NotCon returns STRING:
		////	{STRING} 'NOT' ID;
		////2nd version:
		////AppCon returns String:
		////	PrimaryElement ({AppCon.left=current} 'AND' right=PrimaryElement)*
		////;
		////
		////PrimaryElement returns String:
		////	'(' AppCon ')' | {Feature} value=ID | NotCon
		////;
		////NotCon returns String:
		////	'NOT'PrimaryElement
		////; DeltaRemoveConnector:
		//	connector=ID ("in" superComponent=ID)?;
		public ParserRule getRule() { return rule; }

		//connector=ID ("in" superComponent=ID)? //Does not work properly yet...
		////AppCon:
		////	{AppCon} features+=Feature*;
		////
		////Feature returns STRING:
		////	value=PrimaryElement ({STRING.left=current} 'AND' right=PrimaryElement)*;
		////
		////PrimaryElement returns STRING:
		////	'(' Feature ')' | {STRING} ID | NotCon;
		////
		////NotCon returns STRING:
		////	{STRING} 'NOT' ID;
		////2nd version:
		////AppCon returns String:
		////	PrimaryElement ({AppCon.left=current} 'AND' right=PrimaryElement)*
		////;
		////
		////PrimaryElement returns String:
		////	'(' AppCon ')' | {Feature} value=ID | NotCon
		////;
		////NotCon returns String:
		////	'NOT'PrimaryElement
		////;
		public Group getGroup() { return cGroup; }

		//connector=ID
		public Assignment getConnectorAssignment_0() { return cConnectorAssignment_0; }

		//ID
		public RuleCall getConnectorIDTerminalRuleCall_0_0() { return cConnectorIDTerminalRuleCall_0_0; }

		//("in" superComponent=ID //Does not work properly yet...
		////AppCon:
		////	{AppCon} features+=Feature*;
		////
		////Feature returns STRING:
		////	value=PrimaryElement ({STRING.left=current} 'AND' right=PrimaryElement)*;
		////
		////PrimaryElement returns STRING:
		////	'(' Feature ')' | {STRING} ID | NotCon;
		////
		////NotCon returns STRING:
		////	{STRING} 'NOT' ID;
		////2nd version:
		////AppCon returns String:
		////	PrimaryElement ({AppCon.left=current} 'AND' right=PrimaryElement)*
		////;
		////
		////PrimaryElement returns String:
		////	'(' AppCon ')' | {Feature} value=ID | NotCon
		////;
		////NotCon returns String:
		////	'NOT'PrimaryElement
		////;)?
		public Group getGroup_1() { return cGroup_1; }

		//"in"
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }

		//superComponent=ID
		public Assignment getSuperComponentAssignment_1_1() { return cSuperComponentAssignment_1_1; }

		//ID
		public RuleCall getSuperComponentIDTerminalRuleCall_1_1_0() { return cSuperComponentIDTerminalRuleCall_1_1_0; }
	}
	
	
	private DeltarxElements pDeltarx;
	private SignalElements pSignal;
	private ComponentElements pComponent;
	private PortElements pPort;
	private SignalTypeElements pSignalType;
	private PortDirectionElements pPortDirection;
	private EnvironmentMessageElements pEnvironmentMessage;
	private ConnectorElements pConnector;
	private ConnectorTypeOneElements pConnectorTypeOne;
	private ConnectorTypeTwoElements pConnectorTypeTwo;
	private DeltaElements pDelta;
	private DeltaAddPortElements pDeltaAddPort;
	private DeltaRemovePortElements pDeltaRemovePort;
	private DeltaAddComponentElements pDeltaAddComponent;
	private DeltaRemoveComponentElements pDeltaRemoveComponent;
	private DeltaAddConnectorElements pDeltaAddConnector;
	private DeltaRemoveConnectorElements pDeltaRemoveConnector;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DeltarxGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.deltarx.Deltarx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Deltarx:
	//	"architecture" name=ID "for featuremodel" fmdir=STRING "{" ("signals" "{" signals+=Signal* "}")? & ("components" "{"
	//	components+=Component* "}")? & ("connectors" "{" connectors+=Connector* "}")? & ("deltas" "{" deltas+=Delta* "}")? &
	//	"}";
	public DeltarxElements getDeltarxAccess() {
		return (pDeltarx != null) ? pDeltarx : (pDeltarx = new DeltarxElements());
	}
	
	public ParserRule getDeltarxRule() {
		return getDeltarxAccess().getRule();
	}

	//Signal:
	//	name=ID type=SignalType;
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//Component:
	//	name=ID "{" ("ports" "{" ports+=Port* "}")? ("connectors" "{" connectors+=Connector* "}")? ("subcomponents" "{"
	//	subcomponents+=Component* "}")? "}";
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	////Ports haben keinen Typ, da Signale einen Typ besitzen
	//Port:
	//	direction=PortDirection name=ID signal=[Signal]?;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//SignalType:
	//	"boolean" | "char" | "int" | "double";
	public SignalTypeElements getSignalTypeAccess() {
		return (pSignalType != null) ? pSignalType : (pSignalType = new SignalTypeElements());
	}
	
	public ParserRule getSignalTypeRule() {
		return getSignalTypeAccess().getRule();
	}

	//PortDirection:
	//	"in" | "out";
	public PortDirectionElements getPortDirectionAccess() {
		return (pPortDirection != null) ? pPortDirection : (pPortDirection = new PortDirectionElements());
	}
	
	public ParserRule getPortDirectionRule() {
		return getPortDirectionAccess().getRule();
	}

	//EnvironmentMessage:
	//	"envmsg";
	public EnvironmentMessageElements getEnvironmentMessageAccess() {
		return (pEnvironmentMessage != null) ? pEnvironmentMessage : (pEnvironmentMessage = new EnvironmentMessageElements());
	}
	
	public ParserRule getEnvironmentMessageRule() {
		return getEnvironmentMessageAccess().getRule();
	}

	//Connector:
	//	name=ID type=(ConnectorTypeOne | ConnectorTypeTwo);
	public ConnectorElements getConnectorAccess() {
		return (pConnector != null) ? pConnector : (pConnector = new ConnectorElements());
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}

	//ConnectorTypeOne:
	//	"(" source=ID "," portnameone=(ID | EnvironmentMessage) "," signaltypeone=ID "," signaltypetwo=ID "," portnametwo=(ID
	//	| EnvironmentMessage) "," destination=ID ")";
	public ConnectorTypeOneElements getConnectorTypeOneAccess() {
		return (pConnectorTypeOne != null) ? pConnectorTypeOne : (pConnectorTypeOne = new ConnectorTypeOneElements());
	}
	
	public ParserRule getConnectorTypeOneRule() {
		return getConnectorTypeOneAccess().getRule();
	}

	//ConnectorTypeTwo:
	//	"(" source=ID "," sourcesignal=ID "," destinationsignal=ID "," destination=ID ")";
	public ConnectorTypeTwoElements getConnectorTypeTwoAccess() {
		return (pConnectorTypeTwo != null) ? pConnectorTypeTwo : (pConnectorTypeTwo = new ConnectorTypeTwoElements());
	}
	
	public ParserRule getConnectorTypeTwoRule() {
		return getConnectorTypeTwoAccess().getRule();
	}

	//Delta:
	//	name=ID ("after" after+=ID*)? "when" appcon=STRING "{" ("removeconnector" "{" removeConnector+=DeltaRemoveConnector*
	//	"}")? ("removecomponent" "{" removeComponent+=DeltaRemoveComponent* "}")? ("removesignal" "{" removeSignal+=[Signal]*
	//	"}")? ("removeport" "{" removePort+=DeltaRemovePort* "}")? ("addsignal" "{" newSignal+=Signal* "}")? ("addcomponent"
	//	"{" newComponent+=DeltaAddComponent* "}")? ("addconnector" "{" newConnector+=DeltaAddConnector* "}")? ("addport" "{"
	//	newPort+=DeltaAddPort* "}")? "}";
	public DeltaElements getDeltaAccess() {
		return (pDelta != null) ? pDelta : (pDelta = new DeltaElements());
	}
	
	public ParserRule getDeltaRule() {
		return getDeltaAccess().getRule();
	}

	//DeltaAddPort:
	//	port=Port "in" portComponent=ID;
	public DeltaAddPortElements getDeltaAddPortAccess() {
		return (pDeltaAddPort != null) ? pDeltaAddPort : (pDeltaAddPort = new DeltaAddPortElements());
	}
	
	public ParserRule getDeltaAddPortRule() {
		return getDeltaAddPortAccess().getRule();
	}

	//DeltaRemovePort:
	//	portName=ID "in" portComponent=ID;
	public DeltaRemovePortElements getDeltaRemovePortAccess() {
		return (pDeltaRemovePort != null) ? pDeltaRemovePort : (pDeltaRemovePort = new DeltaRemovePortElements());
	}
	
	public ParserRule getDeltaRemovePortRule() {
		return getDeltaRemovePortAccess().getRule();
	}

	//DeltaAddComponent:
	//	component=Component ("in" superComponent=ID)?;
	public DeltaAddComponentElements getDeltaAddComponentAccess() {
		return (pDeltaAddComponent != null) ? pDeltaAddComponent : (pDeltaAddComponent = new DeltaAddComponentElements());
	}
	
	public ParserRule getDeltaAddComponentRule() {
		return getDeltaAddComponentAccess().getRule();
	}

	//DeltaRemoveComponent:
	//	component=ID ("in" superComponent=ID)?;
	public DeltaRemoveComponentElements getDeltaRemoveComponentAccess() {
		return (pDeltaRemoveComponent != null) ? pDeltaRemoveComponent : (pDeltaRemoveComponent = new DeltaRemoveComponentElements());
	}
	
	public ParserRule getDeltaRemoveComponentRule() {
		return getDeltaRemoveComponentAccess().getRule();
	}

	//DeltaAddConnector:
	//	connector=Connector ("in" superComponent=ID)?;
	public DeltaAddConnectorElements getDeltaAddConnectorAccess() {
		return (pDeltaAddConnector != null) ? pDeltaAddConnector : (pDeltaAddConnector = new DeltaAddConnectorElements());
	}
	
	public ParserRule getDeltaAddConnectorRule() {
		return getDeltaAddConnectorAccess().getRule();
	}

	////Does not work properly yet...
	////AppCon:
	////	{AppCon} features+=Feature*;
	////
	////Feature returns STRING:
	////	value=PrimaryElement ({STRING.left=current} 'AND' right=PrimaryElement)*;
	////
	////PrimaryElement returns STRING:
	////	'(' Feature ')' | {STRING} ID | NotCon;
	////
	////NotCon returns STRING:
	////	{STRING} 'NOT' ID;
	////2nd version:
	////AppCon returns String:
	////	PrimaryElement ({AppCon.left=current} 'AND' right=PrimaryElement)*
	////;
	////
	////PrimaryElement returns String:
	////	'(' AppCon ')' | {Feature} value=ID | NotCon
	////;
	////NotCon returns String:
	////	'NOT'PrimaryElement
	////; DeltaRemoveConnector:
	//	connector=ID ("in" superComponent=ID)?;
	public DeltaRemoveConnectorElements getDeltaRemoveConnectorAccess() {
		return (pDeltaRemoveConnector != null) ? pDeltaRemoveConnector : (pDeltaRemoveConnector = new DeltaRemoveConnectorElements());
	}
	
	public ParserRule getDeltaRemoveConnectorRule() {
		return getDeltaRemoveConnectorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
